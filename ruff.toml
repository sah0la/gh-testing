# ruff configuration for release builds.
# https://docs.astral.sh/ruff/configuration/

# Specify a line length limit.
line-length = 200

extend-exclude = [
    "docs/"
]

# Show fixes in the output, but don't apply them automatically.
# Can be overridden by command-line flags like --fix or --no-fix.
fix = false

# Enable preview features.
#preview = true

[lint.pydocstyle]
# Use pep257 docstrings (default=google).
convention = "pep257"

[lint.per-file-ignores]
"tests/**" = [
    # Exempt unit tests from docstring requirements, but enforce docstring style it exists."
    "D100", # pydocstyle: Missing docstring in public module
    "D101", # pydocstyle: Missing docstring in public class
    "D102", # pydocstyle: Missing docstring in public method
    "D104", # pydocstyle: Missing docstring in public package
    "D107", # pydocstyle: Missing docstring in `__init__`
    "B905", # `zip()` without an explicit `strict=` parameter
]


[lint]
# Select the rules Ruff should enforce.
# https://docs.astral.sh/ruff/rules/
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort (import sorting)
    "B",  # flake8-bugbear (potential bugs)
    "C4", # flake8-comprehensions (more idiomatic comprehensions)
    "UP", # pyupgrade (upgrade syntax to newer Python versions)
    "RUF",# Ruff-specific rules
    "D",  # pydocstyle
    "PL", # Pylint
    "C90", # Mccabe. See [lint.mccabe]
    #"DOC", # Preview: pydoclint (DOC)
]

ignore = [
    "D203",  # Conflicts with D211
    "D213",  # Conflicts with D212
    "PLR6301", # Method `xxx()` could be a function, class method, or static method
    "DOC201", # Preview: docstring-missing-returns. Does not work with PEP257
]

# preview mode features:
# Allow `µ` (MICRO SIGN) over `μ` (GREEK SMALL LETTER MU)?
allowed-confusables = ["µ"]

[lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 5.
max-complexity = 6
